        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:33
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
 10474169:    9:  if (*(int*)a > *(int*)b)
  1297565:   10:    return 1;
  9176604:   11:  if (*(int*)a < *(int*)b)
  3849293:   12:    return -1;
  5327311:   13:  return 0;
 10474169:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    87516:   23:  int* k = malloc(10 * sizeof(int));
    87516:   24:  k[0] = k1;
    87516:   25:  k[1] = k2;
    87516:   26:  k[2] = k3;
    87516:   27:  k[3] = k4;
    87516:   28:  k[4] = k5;
    87516:   29:  k[5] = k6;
    87516:   30:  k[6] = k7;
    87516:   31:  k[7] = k8;
    87516:   32:  k[8] = k9;
    87516:   33:  k[9] = k10;
    87516:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   174081:   44:  SelectStream(1);
   174081:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   348162:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   174081:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  3829782:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
 38297820:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
 33075390:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
 17408100:   65:        }
  1740810:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   174081:   73:  if (numPlayers == 2)
        -:   74:    {
    68706:   75:      state->supplyCount[curse] = 10;
    68706:   76:    }
   105375:   77:  else if (numPlayers == 3)
        -:   78:    {
    52683:   79:      state->supplyCount[curse] = 20;
    52683:   80:    }
        -:   81:  else
        -:   82:    {
    52692:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   174081:   87:  if (numPlayers == 2)
        -:   88:    {
    68706:   89:      state->supplyCount[estate] = 8;
    68706:   90:      state->supplyCount[duchy] = 8;
    68706:   91:      state->supplyCount[province] = 8;
    68706:   92:    }
        -:   93:  else
        -:   94:    {
   105375:   95:      state->supplyCount[estate] = 12;
   105375:   96:      state->supplyCount[duchy] = 12;
   105375:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   174081:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   174081:  102:  state->supplyCount[silver] = 40;
   174081:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  7311402:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
 57446730:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
 26982555:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  3307539:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
   348162:  115:		  if (numPlayers == 2){ 
   137412:  116:		    state->supplyCount[i] = 8; 
   137412:  117:		  }
   210750:  118:		  else{ state->supplyCount[i] = 12; }
   348162:  119:		}
        -:  120:	      else
        -:  121:		{
  1392648:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  1740810:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 25241745:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
 25241745:  130:	}
        -:  131:
  3481620:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1360620:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
   506229:  140:      state->deckCount[i] = 0;
  4049832:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
  1518687:  143:	  state->deck[i][j] = estate;
  1518687:  144:	  state->deckCount[i]++;
  1518687:  145:	}
  8099664:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
  3543603:  148:	  state->deck[i][j] = copper;
  3543603:  149:	  state->deckCount[i]++;		
  3543603:  150:	}
   506229:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1360620:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
   506229:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
   506229:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1360620:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   506229:  166:      state->handCount[i] = 0;
   506229:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
   506229:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  9748536:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
  4700187:  178:      state->embargoTokens[i] = 0;
  4700187:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   174081:  182:  state->outpostPlayed = 0;
   174081:  183:  state->phase = 0;
   174081:  184:  state->numActions = 1;
   174081:  185:  state->numBuys = 1;
   174081:  186:  state->playedCardCount = 0;
   174081:  187:  state->whoseTurn = 0;
   174081:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  2088972:  192:  for (it = 0; it < 5; it++){
   870405:  193:    drawCard(state->whoseTurn, state);
   870405:  194:  }
        -:  195:
   174081:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   174081:  198:  return 0;
   174081:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   514883:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   514883:  209:  if (state->deckCount[player] < 1)
     3131:  210:    return -1;
   511752:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 12626710:  214:  while (state->deckCount[player] > 0) {
  5801603:  215:    card = floor(Random() * state->deckCount[player]);
  5801603:  216:    newDeck[newDeckPos] = state->deck[player][card];
  5801603:  217:    newDeckPos++;
158775018:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
 73585906:  219:      state->deck[player][i] = state->deck[player][i+1];
 73585906:  220:    }
  5801603:  221:    state->deckCount[player]--;
        -:  222:  }
 12626710:  223:  for (i = 0; i < newDeckPos; i++) {
  5801603:  224:    state->deck[player][i] = newDeck[i];
  5801603:  225:    state->deckCount[player]++;
  5801603:  226:  }
        -:  227:
   511752:  228:  return 0;
   514883:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      360:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
   156572:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
   157959:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    17559:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
   140400:  401:  j = 0;
  7300800:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
  3510000:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
   388800:  406:	  j++;
   388800:  407:	}
  3510000:  408:    }
   140400:  409:  if ( j >= 3)
        -:  410:    {
   109296:  411:      return 1;
        -:  412:    }
        -:  413:
    31104:  414:  return 0;
   157959:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  4279063:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1480020:  533:    for (i = 0; i < state->discardCount[player];i++){
   736724:  534:      state->deck[player][i] = state->discard[player][i];
   736724:  535:      state->discard[player][i] = -1;
   736724:  536:    }
        -:  537:
     3286:  538:    state->deckCount[player] = state->discardCount[player];
     3286:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     3286:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     3286:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     3286:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     3286:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     3286:  559:    if (deckCounter == 0)
      352:  560:      return -1;
        -:  561:
     2934:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     2934:  563:    state->deckCount[player]--;
     2934:  564:    state->handCount[player]++;//Increment hand count
     2934:  565:  }
        -:  566:
        -:  567:  else{
  4275777:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  4275777:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  4275777:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  4275777:  576:    state->deckCount[player]--;
  4275777:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  4278711:  580:  return 0;
  4279063:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      243:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        9:  588:      return 0;
        -:  589:    case estate:
        9:  590:      return 2;
        -:  591:    case duchy:
        9:  592:      return 5;
        -:  593:    case province:
        9:  594:      return 8;
        -:  595:    case copper:
        9:  596:      return 0;
        -:  597:    case silver:
        9:  598:      return 3;
        -:  599:    case gold:
        9:  600:      return 6;
        -:  601:    case adventurer:
        9:  602:      return 6;
        -:  603:    case council_room:
        9:  604:      return 5;
        -:  605:    case feast:
        9:  606:      return 4;
        -:  607:    case gardens:
        9:  608:      return 4;
        -:  609:    case mine:
        9:  610:      return 5;
        -:  611:    case remodel:
        9:  612:      return 4;
        -:  613:    case smithy:
        9:  614:      return 4;
        -:  615:    case village:
        9:  616:      return 3;
        -:  617:    case baron:
        9:  618:      return 4;
        -:  619:    case great_hall:
        9:  620:      return 3;
        -:  621:    case minion:
        9:  622:      return 5;
        -:  623:    case steward:
        9:  624:      return 3;
        -:  625:    case tribute:
        9:  626:      return 5;
        -:  627:    case ambassador:
        9:  628:      return 3;
        -:  629:    case cutpurse:
        9:  630:      return 4;
        -:  631:    case embargo: 
        9:  632:      return 2;
        -:  633:    case outpost:
        9:  634:      return 5;
        -:  635:    case salvager:
        9:  636:      return 4;
        -:  637:    case sea_hag:
        9:  638:      return 4;
        -:  639:    case treasure_map:
        9:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      243:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    30135:  653:  int currentPlayer = whoseTurn(state);
    30135:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    30135:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    30135:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    30135:  660:  int z = 0;// this is the counter for the temp hand
    30135:  661:  if (nextPlayer > (state->numPlayers - 1)){
    15084:  662:    nextPlayer = 0;
    15084:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    30135:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      return adventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
    #####:  673:      return councilRoomEffect(state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:      return smithyEffect(state, handPos);
        -:  794:		
        -:  795:    case village:
        -:  796:      //+1 Card
    #####:  797:      drawCard(currentPlayer, state);
        -:  798:			
        -:  799:      //+2 Actions
    #####:  800:      state->numActions = state->numActions + 2;
        -:  801:			
        -:  802:      //discard played card from hand
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
    #####:  804:      return 0;
        -:  805:		
        -:  806:    case baron:
    #####:  807:      state->numBuys++;//Increase buys by 1!
    #####:  808:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  809:	int p = 0;//Iterator for hand!
    #####:  810:	int card_not_discarded = 1;//Flag for discard set!
    #####:  811:	while(card_not_discarded){
    #####:  812:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  813:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  814:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  815:	    state->discardCount[currentPlayer]++;
    #####:  816:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  817:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  818:	    }
    #####:  819:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  820:	    state->handCount[currentPlayer]--;
    #####:  821:	    card_not_discarded = 0;//Exit the loop
    #####:  822:	  }
    #####:  823:	  else if (p > state->handCount[currentPlayer]){
        -:  824:	    if(DEBUG) {
        -:  825:	      printf("No estate cards in your hand, invalid choice\n");
        -:  826:	      printf("Must gain an estate if there are any\n");
        -:  827:	    }
    #####:  828:	    if (supplyCount(estate, state) > 0){
    #####:  829:	      gainCard(estate, state, 0, currentPlayer);
    #####:  830:	      state->supplyCount[estate]--;//Decrement estates
    #####:  831:	      if (supplyCount(estate, state) == 0){
    #####:  832:		isGameOver(state);
    #####:  833:	      }
    #####:  834:	    }
    #####:  835:	    card_not_discarded = 0;//Exit the loop
    #####:  836:	  }
        -:  837:			    
        -:  838:	  else{
    #####:  839:	    p++;//Next card
        -:  840:	  }
        -:  841:	}
    #####:  842:      }
        -:  843:			    
        -:  844:      else{
    #####:  845:	if (supplyCount(estate, state) > 0){
    #####:  846:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  847:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  848:	  if (supplyCount(estate, state) == 0){
    #####:  849:	    isGameOver(state);
    #####:  850:	  }
    #####:  851:	}
        -:  852:      }
        -:  853:	    
        -:  854:      
    #####:  855:      return 0;
        -:  856:		
        -:  857:    case great_hall:
        -:  858:      //+1 Card
    30009:  859:      drawCard(currentPlayer, state);
        -:  860:			
        -:  861:      //+1 Actions
    30009:  862:      state->numActions++;
        -:  863:			
        -:  864:      //discard card from hand
    30009:  865:      discardCard(handPos, currentPlayer, state, 0);
    30009:  866:      return 0;
        -:  867:		
        -:  868:    case minion:
        -:  869:      //+1 action
    #####:  870:      state->numActions++;
        -:  871:			
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:			
    #####:  875:      if (choice1)		//+2 coins
        -:  876:	{
    #####:  877:	  state->coins = state->coins + 2;
    #####:  878:	}
        -:  879:			
    #####:  880:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  881:	{
        -:  882:	  //discard hand
    #####:  883:	  while(numHandCards(state) > 0)
        -:  884:	    {
    #####:  885:	      discardCard(handPos, currentPlayer, state, 0);
        -:  886:	    }
        -:  887:				
        -:  888:	  //draw 4
    #####:  889:	  for (i = 0; i < 4; i++)
        -:  890:	    {
    #####:  891:	      drawCard(currentPlayer, state);
    #####:  892:	    }
        -:  893:				
        -:  894:	  //other players discard hand and redraw if hand size > 4
    #####:  895:	  for (i = 0; i < state->numPlayers; i++)
        -:  896:	    {
    #####:  897:	      if (i != currentPlayer)
        -:  898:		{
    #####:  899:		  if ( state->handCount[i] > 4 )
        -:  900:		    {
        -:  901:		      //discard hand
    #####:  902:		      while( state->handCount[i] > 0 )
        -:  903:			{
    #####:  904:			  discardCard(handPos, i, state, 0);
        -:  905:			}
        -:  906:							
        -:  907:		      //draw 4
    #####:  908:		      for (j = 0; j < 4; j++)
        -:  909:			{
    #####:  910:			  drawCard(i, state);
    #####:  911:			}
    #####:  912:		    }
    #####:  913:		}
    #####:  914:	    }
        -:  915:				
    #####:  916:	}
    #####:  917:      return 0;
        -:  918:		
        -:  919:    case steward:
      126:  920:      if (choice1 == 1)
        -:  921:	{
        -:  922:	  //+2 cards
       81:  923:	  drawCard(currentPlayer, state);
       81:  924:	  drawCard(currentPlayer, state);
       81:  925:	}
       45:  926:      else if (choice1 == 2)
        -:  927:	{
        -:  928:	  //+2 coins
       27:  929:	  state->coins = state->coins + 2;
       27:  930:	}
        -:  931:      else
        -:  932:	{
        -:  933:	  //trash 2 cards in hand
       18:  934:	  discardCard(choice2, currentPlayer, state, 1);
       18:  935:	  discardCard(choice3, currentPlayer, state, 1);
        -:  936:	}
        -:  937:			
        -:  938:      //discard card from hand
      126:  939:      discardCard(handPos, currentPlayer, state, 0);
      126:  940:      return 0;
        -:  941:		
        -:  942:    case tribute:
    #####:  943:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  944:	if (state->deckCount[nextPlayer] > 0){
    #####:  945:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  946:	  state->deckCount[nextPlayer]--;
    #####:  947:	}
    #####:  948:	else if (state->discardCount[nextPlayer] > 0){
    #####:  949:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  950:	  state->discardCount[nextPlayer]--;
    #####:  951:	}
        -:  952:	else{
        -:  953:	  //No Card to Reveal
        -:  954:	  if (DEBUG){
        -:  955:	    printf("No cards to reveal\n");
        -:  956:	  }
        -:  957:	}
    #####:  958:      }
        -:  959:	    
        -:  960:      else{
    #####:  961:	if (state->deckCount[nextPlayer] == 0){
    #####:  962:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  963:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  964:	    state->deckCount[nextPlayer]++;
    #####:  965:	    state->discard[nextPlayer][i] = -1;
    #####:  966:	    state->discardCount[nextPlayer]--;
    #####:  967:	  }
        -:  968:			    
    #####:  969:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  970:	} 
    #####:  971:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  972:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  973:	state->deckCount[nextPlayer]--;
    #####:  974:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  975:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  976:	state->deckCount[nextPlayer]--;
        -:  977:      }    
        -:  978:		       
    #####:  979:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  980:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  981:	state->playedCardCount++;
    #####:  982:	tributeRevealedCards[1] = -1;
    #####:  983:      }
        -:  984:
    #####:  985:      for (i = 0; i <= 2; i ++){
    #####:  986:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  987:	  state->coins += 2;
    #####:  988:	}
        -:  989:		    
    #####:  990:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  991:	  drawCard(currentPlayer, state);
    #####:  992:	  drawCard(currentPlayer, state);
    #####:  993:	}
        -:  994:	else{//Action Card
    #####:  995:	  state->numActions = state->numActions + 2;
        -:  996:	}
    #####:  997:      }
        -:  998:	    
    #####:  999:      return 0;
        -: 1000:		
        -: 1001:    case ambassador:
    #####: 1002:      return ambassadorEffect(choice1, choice2, state, handPos);
        -: 1003:		
        -: 1004:    case cutpurse:
        -: 1005:
    #####: 1006:      updateCoins(currentPlayer, state, 2);
    #####: 1007:      for (i = 0; i < state->numPlayers; i++)
        -: 1008:	{
    #####: 1009:	  if (i != currentPlayer)
        -: 1010:	    {
    #####: 1011:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1012:		{
    #####: 1013:		  if (state->hand[i][j] == copper)
        -: 1014:		    {
    #####: 1015:		      discardCard(j, i, state, 0);
    #####: 1016:		      break;
        -: 1017:		    }
    #####: 1018:		  if (j == state->handCount[i])
        -: 1019:		    {
    #####: 1020:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1021:			{
        -: 1022:			  if (DEBUG)
        -: 1023:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1024:			}	
    #####: 1025:		      break;
        -: 1026:		    }		
    #####: 1027:		}
        -: 1028:					
    #####: 1029:	    }
        -: 1030:				
    #####: 1031:	}				
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1035:
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:		
        -: 1039:    case embargo: 
        -: 1040:      //+2 Coins
    #####: 1041:      state->coins = state->coins + 2;
        -: 1042:			
        -: 1043:      //see if selected pile is in play
    #####: 1044:      if ( state->supplyCount[choice1] == -1 )
        -: 1045:	{
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:			
        -: 1049:      //add embargo token to selected supply pile
    #####: 1050:      state->embargoTokens[choice1]++;
        -: 1051:			
        -: 1052:      //trash card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case outpost:
        -: 1057:      //set outpost flag
    #####: 1058:      state->outpostPlayed++;
        -: 1059:			
        -: 1060:      //discard card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case salvager:
        -: 1065:      //+1 buy
    #####: 1066:      state->numBuys++;
        -: 1067:			
    #####: 1068:      if (choice1)
        -: 1069:	{
        -: 1070:	  //gain coins equal to trashed card
    #####: 1071:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1072:	  //trash card
    #####: 1073:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1074:	}
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case sea_hag:
    #####: 1081:      return seaHagEffect(state);
        -: 1082:		
        -: 1083:    case treasure_map:
        -: 1084:      //search hand for another treasure_map
    #####: 1085:      index = -1;
    #####: 1086:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1087:	{
    #####: 1088:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1089:	    {
    #####: 1090:	      index = i;
    #####: 1091:	      break;
        -: 1092:	    }
    #####: 1093:	}
    #####: 1094:      if (index > -1)
        -: 1095:	{
        -: 1096:	  //trash both treasure cards
    #####: 1097:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1098:	  discardCard(index, currentPlayer, state, 1);
        -: 1099:
        -: 1100:	  //gain 4 Gold cards
    #####: 1101:	  for (i = 0; i < 4; i++)
        -: 1102:	    {
    #####: 1103:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1104:	    }
        -: 1105:				
        -: 1106:	  //return success
    #####: 1107:	  return 1;
        -: 1108:	}
        -: 1109:			
        -: 1110:      //no second treasure_map found in hand
    #####: 1111:      return -1;
        -: 1112:    }
        -: 1113:	
    #####: 1114:  return -1;
    30135: 1115:}
        -: 1116:
        -: 1117:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1118:{
        -: 1119:	
        -: 1120:  //if card is not trashed, added to Played pile 
    70189: 1121:  if (trashFlag < 1)
        -: 1122:    {
        -: 1123:      //add card to played pile
    70153: 1124:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    70153: 1125:      state->playedCardCount++;
    70153: 1126:    }
        -: 1127:	
        -: 1128:  //set played card to -1
    70189: 1129:  state->hand[currentPlayer][handPos] = -1;
        -: 1130:	
        -: 1131:  //remove card from player's hand
    70189: 1132:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1133:    {
        -: 1134:      //reduce number of cards in hand
       66: 1135:      state->handCount[currentPlayer]--;
       66: 1136:    }
    70123: 1137:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1138:    {
        -: 1139:      //reduce number of cards in hand
       63: 1140:      state->handCount[currentPlayer]--;
       63: 1141:    }
        -: 1142:  else 	
        -: 1143:    {
        -: 1144:      //replace discarded card with last card in hand
    70060: 1145:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1146:      //set last card to -1
    70060: 1147:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1148:      //reduce number of cards in hand
    70060: 1149:      state->handCount[currentPlayer]--;
        -: 1150:    }
        -: 1151:	
    70189: 1152:  return 0;
        -: 1153:}
        -: 1154:
        -: 1155:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1156:{
        -: 1157:  //Note: supplyPos is enum of choosen card
        -: 1158:	
        -: 1159:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1160:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1161:    {
    #####: 1162:      return -1;
        -: 1163:    }
        -: 1164:	
        -: 1165:  //added card for [whoseTurn] current player:
        -: 1166:  // toFlag = 0 : add to discard
        -: 1167:  // toFlag = 1 : add to deck
        -: 1168:  // toFlag = 2 : add to hand
        -: 1169:
    #####: 1170:  if (toFlag == 1)
        -: 1171:    {
    #####: 1172:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1173:      state->deckCount[player]++;
    #####: 1174:    }
    #####: 1175:  else if (toFlag == 2)
        -: 1176:    {
    #####: 1177:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1178:      state->handCount[player]++;
    #####: 1179:    }
        -: 1180:  else
        -: 1181:    {
    #####: 1182:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1183:      state->discardCount[player]++;
        -: 1184:    }
        -: 1185:	
        -: 1186:  //decrease number in supply pile
    #####: 1187:  state->supplyCount[supplyPos]--;
        -: 1188:	 
    #####: 1189:  return 0;
    #####: 1190:}
        -: 1191:
        -: 1192:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1193:{
        -: 1194:  int i;
        -: 1195:	
        -: 1196:  //reset coin count
   174081: 1197:  state->coins = 0;
        -: 1198:
        -: 1199:  //add coins for each Treasure card in player's hand
  2088972: 1200:  for (i = 0; i < state->handCount[player]; i++)
        -: 1201:    {
   870405: 1202:      if (state->hand[player][i] == copper)
        -: 1203:	{
   696324: 1204:	  state->coins += 1;
   696324: 1205:	}
   174081: 1206:      else if (state->hand[player][i] == silver)
        -: 1207:	{
    #####: 1208:	  state->coins += 2;
    #####: 1209:	}
   174081: 1210:      else if (state->hand[player][i] == gold)
        -: 1211:	{
    #####: 1212:	  state->coins += 3;
    #####: 1213:	}	
   870405: 1214:    }	
        -: 1215:
        -: 1216:  //add bonus
   174081: 1217:  state->coins += bonus;
        -: 1218:
   174081: 1219:  return 0;
        -: 1220:}
        -: 1221:
        -: 1222:int adventurerEffect(struct gameState *state) {
    86032: 1223:    int drawntreasure=0;
    86032: 1224:    int currentPlayer = whoseTurn(state);
        -: 1225:    int cardDrawn;
        -: 1226:    int temphand[MAX_HAND];// moved above the if statement
    86032: 1227:    int z = 0;// this is the counter for the temp hand
        -: 1228:
  6608894: 1229:    while(drawntreasure<2){
  3218415: 1230:        if (state->deckCount[currentPlayer] <=1){//if the deck is empty we
        -: 1231:            // need to shuffle discard and add to deck
     5368: 1232:            shuffle(currentPlayer, state);
     5368: 1233:        }
  3218415: 1234:        drawCard(currentPlayer, state);
  3218415: 1235:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  9451075: 1236:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
   172064: 1237:            drawntreasure++;
        -: 1238:        else{
  3046351: 1239:            temphand[z]=cardDrawn;
  3046351: 1240:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  3046351: 1241:            z++;
        -: 1242:        }
        -: 1243:    }
  6264766: 1244:    while(z-1>=0){
  3046351: 1245:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  3046351: 1246:        z=z-1;
        -: 1247:    }
    86032: 1248:    return 0;
        -: 1249:}
        -: 1250:
        -: 1251:int smithyEffect(struct gameState *state, int handPos) {
        -: 1252:    //+3 Cards
    40018: 1253:    int currentPlayer = whoseTurn(state);
        -: 1254:    int i;
        -: 1255:
   400180: 1256:    for (i = 0; i < 4; i++)
        -: 1257:    {
   160072: 1258:        drawCard(currentPlayer, state);
   160072: 1259:    }
        -: 1260:
        -: 1261:    //discard card from hand
    40018: 1262:    discardCard(handPos, currentPlayer, state, 0);
    40018: 1263:    return 0;
        -: 1264:}
        -: 1265:
        -: 1266:int councilRoomEffect(struct gameState *state, int handPos) {
        -: 1267:    //+4 Cards
        -: 1268:    int i;
    #####: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:
    #####: 1271:    for (i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:        drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //+1 Buy
    #####: 1277:    state->numBuys++;
        -: 1278:
        -: 1279:    //Each other player draws a card
    #####: 1280:    for (i = 0; i < state->numPlayers; i++)
        -: 1281:    {
        -: 1282:        //if ( i != currentPlayer )
        -: 1283:        //{
    #####: 1284:            drawCard(i, state);
        -: 1285:        //}
    #####: 1286:    }
        -: 1287:
        -: 1288:    //put played card in played card pile
    #####: 1289:    discardCard(handPos, currentPlayer, state, 0);
        -: 1290:
    #####: 1291:    return 0;
        -: 1292:}
        -: 1293:
        -: 1294:int ambassadorEffect(int choice1, int choice2, struct gameState *state, int handPos) {
        -: 1295:    int i;
    #####: 1296:    int j = 0;		//used to check if player has enough cards to discard
    #####: 1297:    int currentPlayer = whoseTurn(state);
        -: 1298:
    #####: 1299:    if (choice2 > 2 || choice2 < 0)
        -: 1300:    {
    #####: 1301:        return -1;
        -: 1302:    }
        -: 1303:
    #####: 1304:    if (choice1 == handPos)
        -: 1305:    {
    #####: 1306:        return -1;
        -: 1307:    }
        -: 1308:
    #####: 1309:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1310:    {
    #####: 1311:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1312:        {
    #####: 1313:            j++;
    #####: 1314:        }
    #####: 1315:    }
    #####: 1316:    if (j < choice2)
        -: 1317:    {
    #####: 1318:        return -1;
        -: 1319:    }
        -: 1320:
        -: 1321:    if (DEBUG)
        -: 1322:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1323:
        -: 1324:    //increase supply count for choosen card by amount being discarded
    #####: 1325:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1326:
        -: 1327:    //each other player gains a copy of revealed card
    #####: 1328:    for (i = 0; i < state->numPlayers; i++)
        -: 1329:    {
    #####: 1330:        if (i != currentPlayer)
        -: 1331:        {
    #####: 1332:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1333:        }
    #####: 1334:    }
        -: 1335:
        -: 1336:    //discard played card from hand
    #####: 1337:    discardCard(handPos, currentPlayer, state, 0);
        -: 1338:
        -: 1339:    //trash copies of cards returned to supply
    #####: 1340:    for (j = 0; j < choice2; j++)
        -: 1341:    {
    #####: 1342:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1343:        {
    #####: 1344:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1345:            {
    #####: 1346:                discardCard(i, currentPlayer, state, 1);
    #####: 1347:                break;
        -: 1348:            }
    #####: 1349:        }
    #####: 1350:    }
        -: 1351:
    #####: 1352:    return 0;
    #####: 1353:}
        -: 1354:
        -: 1355:int seaHagEffect(struct gameState *state) {
        -: 1356:    int i;
    #####: 1357:    int currentPlayer = whoseTurn(state);
        -: 1358:
    #####: 1359:    for (i = 0; i < state->numPlayers; i++){
    #####: 1360:        if (i != currentPlayer){
    #####: 1361:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1362:            state->discardCount[i]++;
    #####: 1363:        }
    #####: 1364:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1365:    }
    #####: 1366:    return 0;
        -: 1367:}
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
